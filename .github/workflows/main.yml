name: Continuous Integration and Delivery

on: [push]

env:
  IMAGE: docker.pkg.github.com/$GITHUB_REPOSITORY/web

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.IMAGE }}-build:latest || true
          docker pull ${{ env.IMAGE }}-runtime:latest || true
      - name: Build images
        run: |
          docker build \
            --target build \
            --cache-from ${{ env.IMAGE }}-build:latest \
            --tag ${{ env.IMAGE }}-build:$GITHUB_SHA \
            --tag ${{ env.IMAGE }}-build:latest \
            --file ./project/Dockerfile.prod \
            "./project"
          docker build \
            --target runtime \
            --cache-from ${{ env.IMAGE }}-runtime:latest \
            --tag ${{ env.IMAGE }}-runtime:$GITHUB_SHA \
            --tag ${{ env.IMAGE }}-runtime:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}-build:$GITHUB_SHA
          docker push ${{ env.IMAGE }}-build:latest
          docker push ${{ env.IMAGE }}-runtime:$GITHUB_SHA
          docker push ${{ env.IMAGE }}-runtime:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.IMAGE }}-build:$GITHUB_SHA || true
          docker pull ${{ env.IMAGE }}-runtime:$GITHUB_SHA || true
      - name: Build images
        run: |
          docker build \
            --target build \
            --cache-from ${{ env.IMAGE }}-build:$GITHUB_SHA \
            --tag ${{ env.IMAGE }}-build:$GITHUB_SHA \
            --file ./project/Dockerfile.prod \
            "./project"
          docker build \
            --target runtime \
            --cache-from ${{ env.IMAGE }}-runtime:$GITHUB_SHA \
            --tag ${{ env.IMAGE }}-runtime:$GITHUB_SHA \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Run container
        run: |
          docker run \
            -d \
            --name fastapi-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}-runtime:$GITHUB_SHA
      - name: Install requirements
        run: docker exec fastapi-tdd pip install black==20.8b1 flake8===3.8.4 isort==5.7.0 pytest==6.2.2
      - name: Pytest
        run: docker exec fastapi-tdd python -m pytest .
      - name: Flake8
        run: docker exec fastapi-tdd python -m flake8 .
      - name: Black
        run: docker exec fastapi-tdd python -m black . --check
      - name: isort
        run: docker exec fastapi-tdd /bin/sh -c "python -m isort ./*/*.py --check-only"

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      HEROKU_APP_NAME: boxing-chesterfield-98766
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
    steps:
      - name: Checkout master
        uses: actions/checkout@v2.3.4
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.IMAGE }}-build:$GITHUB_SHA || true
          docker pull ${{ env.IMAGE }}-runtime:$GITHUB_SHA || true
      - name: Build images
        run: |
          docker build \
            --target build \
            --cache-from ${{ env.IMAGE }}-build:$GITHUB_SHA \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}-build:$GITHUB_SHA \
            --file ./project/Dockerfile.prod \
            "./project"
          docker build \
            --target runtime \
            --cache-from ${{ env.IMAGE }}-runtime:$GITHUB_SHA \
            --tag ${{ env.IMAGE }}-runtime:$GITHUB_SHA \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
            --file ./project/Dockerfile.prod \
            "./project"
      - name: Log in to the Heroku Container Registry
        run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
        env:
          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}:latest
      - name: Set environment variables
        run: |
          echo ::set-env name=HEROKU_REGISTRY_IMAGE::${{ env.HEROKU_REGISTRY_IMAGE }}
          echo ::set-env name=HEROKU_AUTH_TOKEN::${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh
